AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application.
Parameters:
  DBEndpoint:
    Type: String
    Description: The endpoint of the database to upgrade
  DBSecretArn: 
    Type: String
    Description: The Arn of the secret to use to connect to the database for upgrade purposes.
  DBSecurityGroup:
    Type: String
    Description: The Security Group for the DB
  ReducedCost:
    Type: String
    Description: If Reduced Cost is et to true, this template will create only 2 of the 3 subnets
    Default: "false"
  Environment:
    Type: String
    Description: The name of the environment being deployed to

Conditions:
  IncludeSubnetC: !Equals
    - !Ref ReducedCost
    - "false"

Resources:
  GetFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - VpcPolicy
    Properties:
      Architectures:
      - x86_64
      Handler: dbupdemo::dbupdemo.Functions::Get
      Runtime: dotnet6
      CodeUri: ""
      MemorySize: 1024
      Timeout: 30
      Role: !GetAtt GetFunctionRole.Arn
      Layers: 
        - arn:aws:lambda:ap-southeast-2:580247275435:layer:LambdaInsightsExtension:38
      Policies:
      - AWSLambdaBasicExecutionRole
      Events:
        RootGet:
          Type: Api
          Properties:
            Path: /
            Method: GET
      Environment:
        Variables:
            DBEndpoint: !Ref DBEndpoint
            DBName: dbupdemo
            DBSecret: !Ref DBSecretArn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${Environment}-VPCStack-AppTierASubnet
          - Fn::ImportValue: !Sub ${Environment}-VPCStack-AppTierBSubnet
          - !If 
            - IncludeSubnetC
            - Fn::ImportValue: !Sub ${Environment}-VPCStack-AppTierBSubnet
            - !Ref AWS::NoValue

  GetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'

  GetFunctionCloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetFunctionCloudWatchLogsPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-GetFunction-*'
      Roles:
        - !Ref GetFunctionRole

  GetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetFunction}"
      RetentionInDays: 30

  DbUpFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - VpcPolicy
    Properties:
      Handler: dbupdemo::dbupdemo.Functions::SchemaUpgrade
      Runtime: dotnet6
      CodeUri: ""
      MemorySize: 1024
      Timeout: 900
      Role: !GetAtt DbUpFunctionRole.Arn
      Environment:
        Variables:
            DBEndpoint: !Ref DBEndpoint
            DBName: dbupdemo
            DBSecret: !Ref DBSecretArn
      VpcConfig:
        SecurityGroupIds:
          - !Ref DBSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${Environment}-VPCStack-AppTierASubnet
          - Fn::ImportValue: !Sub ${Environment}-VPCStack-AppTierBSubnet
          - !If 
            - IncludeSubnetC
            - Fn::ImportValue: !Sub ${Environment}-VPCStack-AppTierBSubnet
            - !Ref AWS::NoValue

  DbUpFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'

  DbUpFunctionCloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DbUpFunctionCloudWatchLogsPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DbUpFunction-*'
      Roles:
        - !Ref DbUpFunctionRole

  DbUpFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DbUpFunction}"
      RetentionInDays: 30

  DbSecretsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DBSecretsPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Ref DBSecretArn
      Roles:
        - !Ref GetFunctionRole
        - !Ref DbUpFunctionRole
  
  VpcPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: dbupdemo-vpcpolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
            Resource: '*'
      Roles:
        - !Ref GetFunctionRole
        - !Ref DbUpFunctionRole

Outputs:
  ApiURL:
    Description: API endpoint URL
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/

