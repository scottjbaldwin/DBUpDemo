AWSTemplateFormatVersion: 2010-09-09
Description: Template that deploys SSH forward tunnel to connect to RDS


Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev
    Description: The name of the Environment this cloud formation template is being deployed to

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64"

  InstanceType:
    Type: String
    Default: "t4g.nano"
    Description: Select a valid instance type for your Region
    AllowedValues:
    - t4g.nano
    - t4g.micro
    - t4g.small


Resources:
  BastionEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref SessionManagerInstanceProfile
      SecurityGroupIds:
        - !GetAtt Ec2InstanceSecurityGroup.GroupId
      SubnetId: 
        Fn::ImportValue: !Sub ${Environment}-VPCStack-AppTierASubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  Ec2InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId:
        Fn::ImportValue: !Sub ${Environment}-VPCStack-VPCID
      SecurityGroupEgress:
      # The SSM Agent connects to Session Manager over TCP 443
      - Description: allow outbound HTTPS to the VPC
        CidrIp:
          Fn::ImportValue: !Sub ${Environment}-VPCStack-CidrBlock
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - Description: allow outbound to HTTPS to S3 for yum
        CidrIp: 
          Fn::ImportValue: !Sub ${Environment}-VPCStack-CidrBlock
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - Description: allow outbound MySql to RDS
        CidrIp:
          Fn::ImportValue: !Sub ${Environment}-VPCStack-CidrBlock
        FromPort: 3306
        ToPort: 3306
        IpProtocol: tcp

  SessionManagerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  SessionManagerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref SessionManagerRole

  BastionEc2InstanceControlRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: BastionEc2InstanceControlFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                - ec2:Start*
                - ec2:Stop*
                Resource: "*"

  SchedulerScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      Description: IAM Role to trigger
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BastionEc2InstanceControlSchedulePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource:
                  Fn::GetAtt:
                    - BastionEc2InstanceControlFunction
                    - Arn

  BastionEc2InstanceControlFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub
        - "/aws/lambda/${function}"
        - function: !Ref BastionEc2InstanceControlFunction

  BastionEc2InstanceControlFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.lambda_handler
      Description: Responsible for shutting down instance at night
      Role: !GetAtt BastionEc2InstanceControlRole.Arn
      Code:
        ZipFile: !Sub
          - |-
            #!/usr/bin/env python3
            import boto3
            region = '${AWS::Region}'
            instances = ['${bastion_ec2_instance_id}']
            ec2 = boto3.client('ec2', region_name=region)

            def lambda_handler(event, context):
                ec2.stop_instances(InstanceIds=instances)
                print('stopped your instances: ' + str(instances))
          - bastion_ec2_instance_id: !Ref BastionEc2Instance

  BastionEc2InstanceControlScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: Schedule to trigger EC2 Instance Control
      Name: !Join ["_", [!Ref "AWS::StackName", "bastion","scheduler"]]
      ScheduleExpression:  cron(0 19 ? * 2-6 *) # 7 pm (AEST) Mon - Fri
      ScheduleExpressionTimezone: Australia/Melbourne
      FlexibleTimeWindow:
        Mode: FLEXIBLE
        MaximumWindowInMinutes: 15
      Target:
        Arn: !GetAtt BastionEc2InstanceControlFunction.Arn
        RoleArn: !GetAtt SchedulerScheduleRole.Arn


Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref BastionEc2Instance

  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt
      - BastionEc2Instance
      - AvailabilityZone
